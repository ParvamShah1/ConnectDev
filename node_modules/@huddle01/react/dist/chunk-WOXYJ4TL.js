import {
  useHuddle01_default
} from "./chunk-B6M254MV.js";

// src/hooks/useDevices.ts
import { useEffect, useState } from "react";
var useDevices = (props) => {
  const { type } = props;
  const { huddleClient } = useHuddle01_default();
  const localPeer = huddleClient.localPeer;
  const deviceHandler = localPeer.deviceHandler;
  const [devices, setDevices] = useState([]);
  const [preferredDeviceId, setPreferredDeviceId] = useState(
    deviceHandler.preferredDevices.get(type) || null
  );
  const fetchDevices = (shouldFetchStream = false) => {
    return deviceHandler.getMediaDevices(type, shouldFetchStream);
  };
  const handlePermissionGranted = (data) => {
    if (data.deviceKind === type) {
      props.onPermissionGranted?.();
    }
  };
  const handlePermissionDenied = (data) => {
    if (data.deviceKind === type) {
      props.onPermissionDenied?.();
    }
  };
  const handleDeviceChange = () => {
    fetchDevices().then((devices2) => {
      setDevices(devices2);
    });
  };
  const handlePrefferedDeviceChange = (data) => {
    if (data.deviceKind === type) {
      setPreferredDeviceId(data.deviceId);
    }
    if (data.deviceId && props?.onDeviceChanged) {
      props.onDeviceChanged(data.deviceId);
    }
  };
  useEffect(() => {
    deviceHandler.once("permission-granted", handlePermissionGranted);
    deviceHandler.once("permission-denied", handlePermissionDenied);
    deviceHandler.on("device-change", handleDeviceChange);
    deviceHandler.on("preferred-device-change", handlePrefferedDeviceChange);
    if (devices.length === 0) {
      fetchDevices(false).then((devices2) => {
        setDevices(devices2);
      });
    }
    return () => {
      deviceHandler.off("permission-granted", handlePermissionGranted);
      deviceHandler.off("permission-denied", handlePermissionDenied);
      deviceHandler.off("device-change", handleDeviceChange);
      deviceHandler.off("preferred-device-change", handlePrefferedDeviceChange);
    };
  }, []);
  const getPermission = () => {
    return deviceHandler.getMediaPermission({ mediaDeviceKind: type });
  };
  const fetchStream = deviceHandler.fetchStream;
  const setPreferredDevice = (deviceId) => {
    return deviceHandler.setPreferredDevice({
      deviceKind: type,
      deviceId
    });
  };
  const preferredDevice = devices.find((device) => device.deviceId === preferredDeviceId) || null;
  return {
    devices,
    preferredDeviceId,
    preferredDevice,
    fetchStream,
    getPermission,
    setPreferredDevice
  };
};

export {
  useDevices
};
//# sourceMappingURL=chunk-WOXYJ4TL.js.map