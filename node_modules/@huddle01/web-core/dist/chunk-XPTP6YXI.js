import {
  Room_default
} from "./chunk-BHHSENOT.js";
import {
  EnhancedEventEmitter
} from "./chunk-WGGPFN2Z.js";
import {
  mainLogger
} from "./chunk-TOCFOGTC.js";

// src/ActiveSpeakers.ts
var logger = mainLogger.createSubLogger("ActiveSpeakers");
var ActiveSpeakers = class _ActiveSpeakers extends EnhancedEventEmitter {
  /**
   * Instance of the ActiveSpeakers Class; used for singleton pattern.
   */
  static __instance;
  /**
   * Get the instance of the ActiveSpeakers Class.
   * @returns ActiveSpeakers instance.
   */
  static getInstance() {
    if (!_ActiveSpeakers.__instance) {
      throw new Error("ActiveSpeakers not initialized");
    }
    return _ActiveSpeakers.__instance;
  }
  /**
   * Create the instance of the ActiveSpeakers Class.
   * @returns ActiveSpeakers instance.
   */
  static createInstance(data) {
    if (_ActiveSpeakers.__instance) {
      return _ActiveSpeakers.__instance;
    }
    _ActiveSpeakers.__instance = new _ActiveSpeakers(data);
    return _ActiveSpeakers.__instance;
  }
  /**
   * Room instance.
   */
  __room = Room_default.getInstance();
  /**
   * Bot instance which has the data producer connected directly to the room bot.
   * This is used to handle all the states of the room and its functionality.
   */
  __bot;
  /**
   * Is the notification active.
   */
  __active;
  /**
   * Is the notification active.
   */
  get active() {
    return this.__active;
  }
  /**
   * Maximum number of entries in the list.
   */
  MAX_SIZE = 20;
  /**
   * Size by which the active speakers list will be notified.
   * `note: default size is 8`
   */
  __size;
  /**
   * Size by which the active speakers list will be notified.
   */
  get size() {
    return this.__size;
  }
  /**
   * Array of ActiveSpeakers ordered by volume.
   */
  __activePeerIds = [];
  /**
   * Update the number of peerIds to notify.
   * @param size
   */
  updateSize = (size) => {
    logger.info("\u{1F514} Updating Active Speaker Size to", size);
    if (size > this.MAX_SIZE) {
      logger.error(
        "\u{1F514} Active Speaker Size cannot be greater than",
        this.MAX_SIZE
      );
      return;
    }
    this.__size = size;
  };
  /**
   * Handle all the events emitted by the bot.
   */
  __handleBotEvents = () => {
    if (this.__bot.listenerCount("active-speakers-change") === 0) {
      this.__bot.on("active-speakers-change", this.__handleActiveSpeakerChange);
    }
  };
  __handleClosingAllEvents = () => {
    this.on("close", () => {
      this.__active = false;
      this.__bot.off(
        "active-speakers-change",
        this.__handleActiveSpeakerChange
      );
    });
  };
  __handleActiveSpeakerChange = (data) => {
    try {
      const { peerIds } = data;
      this.__activePeerIds = peerIds;
      logger.debug("\u{1F514} Active Speakers Change", this.__activePeerIds);
      const slicedPeerData = peerIds.slice(0, this.__size);
      this.__room.emit("active-speakers-change", {
        peerIds: slicedPeerData ?? [],
        dominantSpeaker: peerIds?.[0] ?? ""
      });
    } catch (error) {
      logger.error("Error: Handling New Active Speakers Notification", error);
      logger.error(error);
    }
  };
  constructor(data) {
    super();
    this.__bot = data.bot;
    this.__size = data?.size ?? 8;
    this.__active = true;
    this.__handleBotEvents();
    this.__handleClosingAllEvents();
  }
};
var ActiveSpeakers_default = ActiveSpeakers;

export {
  ActiveSpeakers_default
};
