"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; } var _class;

var _chunkAA6KQKWQcjs = require('./chunk-AA6KQKWQ.cjs');


var _chunkO5HDCTOEcjs = require('./chunk-O5HDCTOE.cjs');

// src/Bot.ts
var logger = _chunkO5HDCTOEcjs.mainLogger.createSubLogger("Bot");
var Bot = (_class = class _Bot extends _chunkAA6KQKWQcjs.EnhancedEventEmitter {
  /**
   * Instance of the Bot Class; used for singleton pattern.
   */
  
  /**
   * Bot Data Consumer
   */
  __init() {this.__botDataConsumer = null}
  /**
   * Get the instance of the Bot Class.
   * @returns Bot instance.
   */
  static getInstance() {
    if (!_Bot.__instance) {
      _Bot.__instance = new _Bot();
      return _Bot.__instance;
    }
    return _Bot.__instance;
  }
  constructor() {
    super();_class.prototype.__init.call(this);_class.prototype.__init2.call(this);;
  }
  __init2() {this.setDataConsumer = (dataConsumer) => {
    logger.debug("\u{1F514} Setting a new data consumer");
    try {
      _optionalChain([this, 'access', _6 => _6.__botDataConsumer, 'optionalAccess', _7 => _7.close, 'call', _8 => _8()]);
      this.__botDataConsumer = dataConsumer;
      this.__botDataConsumer.on("message", (message) => {
        try {
          logger.debug("\u{1F514} Bot Data Message", message);
          const parsedJsonData = JSON.parse(message);
          if (parsedJsonData.label === "lastN") {
            this.emit("active-speakers-change", {
              peerIds: _nullishCoalesce(_optionalChain([parsedJsonData, 'optionalAccess', _9 => _9.payload, 'optionalAccess', _10 => _10.activeSpeakers]), () => ( []))
            });
          }
        } catch (error) {
          logger.error("\u274C Error in bot data consumer message", error);
        }
      });
    } catch (error) {
      logger.error("Error in setting data consumer", error);
    }
  }}
}, _class);
var Bot_default = Bot;



exports.Bot_default = Bot_default;
