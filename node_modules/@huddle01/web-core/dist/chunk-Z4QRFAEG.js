import {
  GeolocationSchema
} from "./chunk-NTD5WULD.js";
import {
  ProtoRequestEvent,
  require_app_data_pb,
  require_permissions_pb,
  require_request_pb,
  require_sctp_stream_parameters_pb,
  require_sdp_info_pb
} from "./chunk-MDWTM2UE.js";
import {
  esm_exports,
  init_esm,
  require_rtp_parameters_pb
} from "./chunk-6SZRNOKT.js";
import {
  EnhancedEventEmitter
} from "./chunk-WGGPFN2Z.js";
import {
  mainLogger
} from "./chunk-TOCFOGTC.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM
} from "./chunk-EK4TMKVS.js";

// ../types/dist/socket.types.js
var require_socket_types = __commonJS({
  "../types/dist/socket.types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketCloseReason = exports.ESocketCloseCode = void 0;
    var ESocketCloseCode2;
    (function(ESocketCloseCode3) {
      ESocketCloseCode3[ESocketCloseCode3["ABNORMAL_CLOSURE"] = 1006] = "ABNORMAL_CLOSURE";
      ESocketCloseCode3[ESocketCloseCode3["NORMAL_CLOSURE"] = 1e3] = "NORMAL_CLOSURE";
      ESocketCloseCode3[ESocketCloseCode3["BROWSER_TAB_CLOSE"] = 1001] = "BROWSER_TAB_CLOSE";
      ESocketCloseCode3[ESocketCloseCode3["GOING_AWAY"] = 4001] = "GOING_AWAY";
      ESocketCloseCode3[ESocketCloseCode3["CONNECTION_EXPIRED"] = 4002] = "CONNECTION_EXPIRED";
      ESocketCloseCode3[ESocketCloseCode3["CONNECTION_ERROR"] = 4006] = "CONNECTION_ERROR";
      ESocketCloseCode3[ESocketCloseCode3["ROOM_CLOSED"] = 4007] = "ROOM_CLOSED";
      ESocketCloseCode3[ESocketCloseCode3["ROOM_ENTRY_DENIED"] = 4008] = "ROOM_ENTRY_DENIED";
      ESocketCloseCode3[ESocketCloseCode3["KICKED"] = 4009] = "KICKED";
    })(ESocketCloseCode2 || (exports.ESocketCloseCode = ESocketCloseCode2 = {}));
    exports.SocketCloseReason = {
      [ESocketCloseCode2.ROOM_CLOSED]: "ROOM_CLOSED",
      [ESocketCloseCode2.ABNORMAL_CLOSURE]: "ABNORMAL_CLOSURE",
      [ESocketCloseCode2.NORMAL_CLOSURE]: "NORMAL_CLOSURE",
      [ESocketCloseCode2.BROWSER_TAB_CLOSE]: "BROWSER_TAB_CLOSE",
      [ESocketCloseCode2.GOING_AWAY]: "GOING_AWAY",
      [ESocketCloseCode2.CONNECTION_ERROR]: "CONNECTION_ERROR",
      [ESocketCloseCode2.CONNECTION_EXPIRED]: "CONNECTION_EXPIRED",
      [ESocketCloseCode2.ROOM_ENTRY_DENIED]: "ROOM_ENTRY_DENIED",
      [ESocketCloseCode2.KICKED]: "KICKED"
    };
  }
});

// ../protoc/dist/rtc/rtp_capabilities_pb.js
var require_rtp_capabilities_pb = __commonJS({
  "../protoc/dist/rtc/rtp_capabilities_pb.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProtoRtpCapabilities = exports.ProtoRtpHeaderExtension = exports.ProtoRtpCodecCapability_ProtoRtcpFeedback = exports.ProtoRtpCodecCapability = void 0;
    var protobuf_1 = (init_esm(), __toCommonJS(esm_exports));
    var ProtoRtpCodecCapability = class _ProtoRtpCodecCapability extends protobuf_1.Message {
      constructor(data) {
        super();
        this.kind = "";
        this.mimeType = "";
        this.preferredPayloadType = 0;
        this.clockRate = 0;
        this.channels = 0;
        this.parameters = {};
        this.rtcpFeedback = [];
        protobuf_1.proto3.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ProtoRtpCodecCapability().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ProtoRtpCodecCapability().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ProtoRtpCodecCapability().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto3.util.equals(_ProtoRtpCodecCapability, a, b);
      }
    };
    exports.ProtoRtpCodecCapability = ProtoRtpCodecCapability;
    ProtoRtpCodecCapability.runtime = protobuf_1.proto3;
    ProtoRtpCodecCapability.typeName = "ProtoRtpCodecCapability";
    ProtoRtpCodecCapability.fields = protobuf_1.proto3.util.newFieldList(() => [
      { no: 1, name: "kind", kind: "scalar", T: 9 },
      { no: 2, name: "mimeType", kind: "scalar", T: 9 },
      { no: 3, name: "preferredPayloadType", kind: "scalar", T: 5 },
      { no: 4, name: "clockRate", kind: "scalar", T: 5 },
      { no: 5, name: "channels", kind: "scalar", T: 5 },
      { no: 6, name: "parameters", kind: "map", K: 9, V: { kind: "scalar", T: 9 } },
      { no: 7, name: "rtcpFeedback", kind: "message", T: ProtoRtpCodecCapability_ProtoRtcpFeedback, repeated: true }
    ]);
    var ProtoRtpCodecCapability_ProtoRtcpFeedback = class _ProtoRtpCodecCapability_ProtoRtcpFeedback extends protobuf_1.Message {
      constructor(data) {
        super();
        this.type = "";
        this.parameter = "";
        protobuf_1.proto3.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ProtoRtpCodecCapability_ProtoRtcpFeedback().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ProtoRtpCodecCapability_ProtoRtcpFeedback().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ProtoRtpCodecCapability_ProtoRtcpFeedback().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto3.util.equals(_ProtoRtpCodecCapability_ProtoRtcpFeedback, a, b);
      }
    };
    exports.ProtoRtpCodecCapability_ProtoRtcpFeedback = ProtoRtpCodecCapability_ProtoRtcpFeedback;
    ProtoRtpCodecCapability_ProtoRtcpFeedback.runtime = protobuf_1.proto3;
    ProtoRtpCodecCapability_ProtoRtcpFeedback.typeName = "ProtoRtpCodecCapability.ProtoRtcpFeedback";
    ProtoRtpCodecCapability_ProtoRtcpFeedback.fields = protobuf_1.proto3.util.newFieldList(() => [
      { no: 1, name: "type", kind: "scalar", T: 9 },
      { no: 2, name: "parameter", kind: "scalar", T: 9 }
    ]);
    var ProtoRtpHeaderExtension = class _ProtoRtpHeaderExtension extends protobuf_1.Message {
      constructor(data) {
        super();
        this.kind = "";
        this.uri = "";
        this.preferredId = 0;
        this.preferredEncrypt = false;
        this.direction = "";
        protobuf_1.proto3.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ProtoRtpHeaderExtension().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ProtoRtpHeaderExtension().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ProtoRtpHeaderExtension().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto3.util.equals(_ProtoRtpHeaderExtension, a, b);
      }
    };
    exports.ProtoRtpHeaderExtension = ProtoRtpHeaderExtension;
    ProtoRtpHeaderExtension.runtime = protobuf_1.proto3;
    ProtoRtpHeaderExtension.typeName = "ProtoRtpHeaderExtension";
    ProtoRtpHeaderExtension.fields = protobuf_1.proto3.util.newFieldList(() => [
      { no: 1, name: "kind", kind: "scalar", T: 9 },
      { no: 2, name: "uri", kind: "scalar", T: 9 },
      { no: 3, name: "preferredId", kind: "scalar", T: 5 },
      { no: 4, name: "preferredEncrypt", kind: "scalar", T: 8 },
      { no: 5, name: "direction", kind: "scalar", T: 9 }
    ]);
    var ProtoRtpCapabilities = class _ProtoRtpCapabilities extends protobuf_1.Message {
      constructor(data) {
        super();
        this.codecs = [];
        this.headerExtensions = [];
        protobuf_1.proto3.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ProtoRtpCapabilities().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ProtoRtpCapabilities().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ProtoRtpCapabilities().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto3.util.equals(_ProtoRtpCapabilities, a, b);
      }
    };
    exports.ProtoRtpCapabilities = ProtoRtpCapabilities;
    ProtoRtpCapabilities.runtime = protobuf_1.proto3;
    ProtoRtpCapabilities.typeName = "ProtoRtpCapabilities";
    ProtoRtpCapabilities.fields = protobuf_1.proto3.util.newFieldList(() => [
      { no: 1, name: "codecs", kind: "message", T: ProtoRtpCodecCapability, repeated: true },
      { no: 2, name: "headerExtensions", kind: "message", T: ProtoRtpHeaderExtension, repeated: true }
    ]);
  }
});

// ../protoc/dist/client/response_pb.js
var require_response_pb = __commonJS({
  "../protoc/dist/client/response_pb.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Response = exports.Error = exports.WaitingRoom = exports.LobbyPeerLeft = exports.PeerLeft = exports.RoomClosedProducers_CloseProducerReason = exports.RoomClosedProducers_CloseProducerInfo = exports.RoomClosedProducers = exports.RoomMetadataUpdated = exports.PeerMetadataUpdated = exports.ReceiveData = exports.NewPeerRole = exports.NewRoomControls = exports.NewPermissions = exports.NewLobbyPeer = exports.NewPeerJoined = exports.RestartTransportIceResponse = exports.CloseConsumerSuccess = exports.CloseProducerSuccess = exports.ConsumeResponse = exports.SyncMeetingStateResponse = exports.ConsumeDataResponse = exports.ProduceDataResponse = exports.ProduceResponse = exports.ConnectTransportResponse = exports.CreateTransportOnClient = exports.ConnectRoomResponse_RTCIceServer = exports.ConnectRoomResponse = exports.LobbyPeers = exports.RoomInfo = exports.PeersInfo_ProducerInfo = exports.PeersInfo = exports.RoomControls_ProduceSources = exports.RoomControls = exports.Hello = void 0;
    var protobuf_1 = (init_esm(), __toCommonJS(esm_exports));
    var permissions_pb_js_1 = require_permissions_pb();
    var rtp_capabilities_pb_js_1 = require_rtp_capabilities_pb();
    var sdp_info_pb_js_1 = require_sdp_info_pb();
    var app_data_pb_js_1 = require_app_data_pb();
    var sctp_stream_parameters_pb_js_1 = require_sctp_stream_parameters_pb();
    var rtp_parameters_pb_js_1 = require_rtp_parameters_pb();
    var Hello = class _Hello extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _Hello().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _Hello().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _Hello().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_Hello, a, b);
      }
    };
    exports.Hello = Hello;
    Hello.runtime = protobuf_1.proto2;
    Hello.typeName = "Hello";
    Hello.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 2, name: "roomId", kind: "scalar", T: 9 },
      { no: 3, name: "sessionId", kind: "scalar", T: 9 },
      { no: 4, name: "acl", kind: "message", T: permissions_pb_js_1.Permissions },
      { no: 5, name: "role", kind: "scalar", T: 9, opt: true },
      { no: 6, name: "metadata", kind: "scalar", T: 9, opt: true }
    ]);
    var RoomControls = class _RoomControls extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _RoomControls().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _RoomControls().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _RoomControls().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_RoomControls, a, b);
      }
    };
    exports.RoomControls = RoomControls;
    RoomControls.runtime = protobuf_1.proto2;
    RoomControls.typeName = "RoomControls";
    RoomControls.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "roomLocked", kind: "scalar", T: 8 },
      { no: 2, name: "allowProduce", kind: "scalar", T: 8 },
      { no: 3, name: "allowProduceSources", kind: "message", T: RoomControls_ProduceSources },
      { no: 4, name: "allowConsume", kind: "scalar", T: 8 },
      { no: 5, name: "allowSendData", kind: "scalar", T: 8 }
    ]);
    var RoomControls_ProduceSources = class _RoomControls_ProduceSources extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _RoomControls_ProduceSources().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _RoomControls_ProduceSources().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _RoomControls_ProduceSources().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_RoomControls_ProduceSources, a, b);
      }
    };
    exports.RoomControls_ProduceSources = RoomControls_ProduceSources;
    RoomControls_ProduceSources.runtime = protobuf_1.proto2;
    RoomControls_ProduceSources.typeName = "RoomControls.ProduceSources";
    RoomControls_ProduceSources.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "cam", kind: "scalar", T: 8 },
      { no: 2, name: "mic", kind: "scalar", T: 8 },
      { no: 3, name: "screen", kind: "scalar", T: 8 }
    ]);
    var PeersInfo = class _PeersInfo extends protobuf_1.Message {
      constructor(data) {
        super();
        this.producers = [];
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _PeersInfo().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _PeersInfo().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _PeersInfo().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_PeersInfo, a, b);
      }
    };
    exports.PeersInfo = PeersInfo;
    PeersInfo.runtime = protobuf_1.proto2;
    PeersInfo.typeName = "PeersInfo";
    PeersInfo.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 3, name: "metadata", kind: "scalar", T: 9, opt: true },
      { no: 5, name: "role", kind: "scalar", T: 9, opt: true },
      { no: 4, name: "producers", kind: "message", T: PeersInfo_ProducerInfo, repeated: true }
    ]);
    var PeersInfo_ProducerInfo = class _PeersInfo_ProducerInfo extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _PeersInfo_ProducerInfo().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _PeersInfo_ProducerInfo().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _PeersInfo_ProducerInfo().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_PeersInfo_ProducerInfo, a, b);
      }
    };
    exports.PeersInfo_ProducerInfo = PeersInfo_ProducerInfo;
    PeersInfo_ProducerInfo.runtime = protobuf_1.proto2;
    PeersInfo_ProducerInfo.typeName = "PeersInfo.ProducerInfo";
    PeersInfo_ProducerInfo.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "id", kind: "scalar", T: 9 },
      { no: 2, name: "label", kind: "scalar", T: 9 }
    ]);
    var RoomInfo = class _RoomInfo extends protobuf_1.Message {
      constructor(data) {
        super();
        this.peers = [];
        this.lobbyPeers = [];
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _RoomInfo().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _RoomInfo().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _RoomInfo().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_RoomInfo, a, b);
      }
    };
    exports.RoomInfo = RoomInfo;
    RoomInfo.runtime = protobuf_1.proto2;
    RoomInfo.typeName = "RoomInfo";
    RoomInfo.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "roomLocked", kind: "scalar", T: 8 },
      { no: 2, name: "config", kind: "message", T: RoomControls },
      { no: 3, name: "peers", kind: "message", T: PeersInfo, repeated: true },
      { no: 4, name: "lobbyPeers", kind: "message", T: LobbyPeers, repeated: true },
      { no: 5, name: "metadata", kind: "scalar", T: 9, opt: true },
      { no: 6, name: "startTime", kind: "scalar", T: 3 }
    ]);
    var LobbyPeers = class _LobbyPeers extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _LobbyPeers().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _LobbyPeers().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _LobbyPeers().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_LobbyPeers, a, b);
      }
    };
    exports.LobbyPeers = LobbyPeers;
    LobbyPeers.runtime = protobuf_1.proto2;
    LobbyPeers.typeName = "LobbyPeers";
    LobbyPeers.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 3, name: "metadata", kind: "scalar", T: 9, opt: true }
    ]);
    var ConnectRoomResponse = class _ConnectRoomResponse extends protobuf_1.Message {
      constructor(data) {
        super();
        this.turnServers = [];
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ConnectRoomResponse().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ConnectRoomResponse().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ConnectRoomResponse().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_ConnectRoomResponse, a, b);
      }
    };
    exports.ConnectRoomResponse = ConnectRoomResponse;
    ConnectRoomResponse.runtime = protobuf_1.proto2;
    ConnectRoomResponse.typeName = "ConnectRoomResponse";
    ConnectRoomResponse.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "roomId", kind: "scalar", T: 9 },
      { no: 2, name: "roomInfo", kind: "message", T: RoomInfo },
      { no: 3, name: "routerRTPCapabilities", kind: "message", T: rtp_capabilities_pb_js_1.ProtoRtpCapabilities },
      { no: 4, name: "turnServers", kind: "message", T: ConnectRoomResponse_RTCIceServer, repeated: true }
    ]);
    var ConnectRoomResponse_RTCIceServer = class _ConnectRoomResponse_RTCIceServer extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ConnectRoomResponse_RTCIceServer().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ConnectRoomResponse_RTCIceServer().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ConnectRoomResponse_RTCIceServer().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_ConnectRoomResponse_RTCIceServer, a, b);
      }
    };
    exports.ConnectRoomResponse_RTCIceServer = ConnectRoomResponse_RTCIceServer;
    ConnectRoomResponse_RTCIceServer.runtime = protobuf_1.proto2;
    ConnectRoomResponse_RTCIceServer.typeName = "ConnectRoomResponse.RTCIceServer";
    ConnectRoomResponse_RTCIceServer.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "urls", kind: "scalar", T: 9 },
      { no: 2, name: "username", kind: "scalar", T: 9, opt: true },
      { no: 3, name: "credential", kind: "scalar", T: 9, opt: true }
    ]);
    var CreateTransportOnClient = class _CreateTransportOnClient extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _CreateTransportOnClient().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _CreateTransportOnClient().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _CreateTransportOnClient().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_CreateTransportOnClient, a, b);
      }
    };
    exports.CreateTransportOnClient = CreateTransportOnClient;
    CreateTransportOnClient.runtime = protobuf_1.proto2;
    CreateTransportOnClient.typeName = "CreateTransportOnClient";
    CreateTransportOnClient.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "transportType", kind: "scalar", T: 9 },
      { no: 2, name: "transportSDPInfo", kind: "message", T: sdp_info_pb_js_1.ProtoTransportSDPInfo }
    ]);
    var ConnectTransportResponse = class _ConnectTransportResponse extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ConnectTransportResponse().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ConnectTransportResponse().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ConnectTransportResponse().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_ConnectTransportResponse, a, b);
      }
    };
    exports.ConnectTransportResponse = ConnectTransportResponse;
    ConnectTransportResponse.runtime = protobuf_1.proto2;
    ConnectTransportResponse.typeName = "ConnectTransportResponse";
    ConnectTransportResponse.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "transportType", kind: "scalar", T: 9 },
      { no: 2, name: "transportId", kind: "scalar", T: 9 }
    ]);
    var ProduceResponse = class _ProduceResponse extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ProduceResponse().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ProduceResponse().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ProduceResponse().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_ProduceResponse, a, b);
      }
    };
    exports.ProduceResponse = ProduceResponse;
    ProduceResponse.runtime = protobuf_1.proto2;
    ProduceResponse.typeName = "ProduceResponse";
    ProduceResponse.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 2, name: "producerId", kind: "scalar", T: 9 },
      { no: 3, name: "label", kind: "scalar", T: 9 },
      { no: 4, name: "appData", kind: "message", T: app_data_pb_js_1.AppData, opt: true }
    ]);
    var ProduceDataResponse = class _ProduceDataResponse extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ProduceDataResponse().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ProduceDataResponse().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ProduceDataResponse().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_ProduceDataResponse, a, b);
      }
    };
    exports.ProduceDataResponse = ProduceDataResponse;
    ProduceDataResponse.runtime = protobuf_1.proto2;
    ProduceDataResponse.typeName = "ProduceDataResponse";
    ProduceDataResponse.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "id", kind: "scalar", T: 9 },
      { no: 2, name: "dataProducerId", kind: "scalar", T: 9 },
      { no: 3, name: "label", kind: "scalar", T: 9 },
      { no: 4, name: "peerId", kind: "scalar", T: 9 },
      { no: 5, name: "protocol", kind: "scalar", T: 9 },
      { no: 6, name: "sctpStreamParameters", kind: "message", T: sctp_stream_parameters_pb_js_1.ProtoSctpStreamParameters },
      { no: 7, name: "appData", kind: "message", T: app_data_pb_js_1.AppData, opt: true }
    ]);
    var ConsumeDataResponse = class _ConsumeDataResponse extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ConsumeDataResponse().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ConsumeDataResponse().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ConsumeDataResponse().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_ConsumeDataResponse, a, b);
      }
    };
    exports.ConsumeDataResponse = ConsumeDataResponse;
    ConsumeDataResponse.runtime = protobuf_1.proto2;
    ConsumeDataResponse.typeName = "ConsumeDataResponse";
    ConsumeDataResponse.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "id", kind: "scalar", T: 9 },
      { no: 2, name: "dataProducerId", kind: "scalar", T: 9 },
      { no: 3, name: "label", kind: "scalar", T: 9 },
      { no: 4, name: "peerId", kind: "scalar", T: 9 },
      { no: 5, name: "protocol", kind: "scalar", T: 9 },
      { no: 6, name: "sctpStreamParameters", kind: "message", T: sctp_stream_parameters_pb_js_1.ProtoSctpStreamParameters },
      { no: 7, name: "appData", kind: "message", T: app_data_pb_js_1.AppData, opt: true }
    ]);
    var SyncMeetingStateResponse = class _SyncMeetingStateResponse extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _SyncMeetingStateResponse().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _SyncMeetingStateResponse().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _SyncMeetingStateResponse().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_SyncMeetingStateResponse, a, b);
      }
    };
    exports.SyncMeetingStateResponse = SyncMeetingStateResponse;
    SyncMeetingStateResponse.runtime = protobuf_1.proto2;
    SyncMeetingStateResponse.typeName = "SyncMeetingStateResponse";
    SyncMeetingStateResponse.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "roomInfo", kind: "message", T: RoomInfo }
    ]);
    var ConsumeResponse = class _ConsumeResponse extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ConsumeResponse().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ConsumeResponse().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ConsumeResponse().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_ConsumeResponse, a, b);
      }
    };
    exports.ConsumeResponse = ConsumeResponse;
    ConsumeResponse.runtime = protobuf_1.proto2;
    ConsumeResponse.typeName = "ConsumeResponse";
    ConsumeResponse.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "label", kind: "scalar", T: 9 },
      { no: 2, name: "consumerId", kind: "scalar", T: 9 },
      { no: 3, name: "producerId", kind: "scalar", T: 9 },
      { no: 4, name: "kind", kind: "scalar", T: 9 },
      { no: 5, name: "rtpParameters", kind: "message", T: rtp_parameters_pb_js_1.ProtoRtpParameters },
      { no: 6, name: "producerPeerId", kind: "scalar", T: 9 },
      { no: 7, name: "appData", kind: "message", T: app_data_pb_js_1.AppData, opt: true }
    ]);
    var CloseProducerSuccess = class _CloseProducerSuccess extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _CloseProducerSuccess().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _CloseProducerSuccess().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _CloseProducerSuccess().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_CloseProducerSuccess, a, b);
      }
    };
    exports.CloseProducerSuccess = CloseProducerSuccess;
    CloseProducerSuccess.runtime = protobuf_1.proto2;
    CloseProducerSuccess.typeName = "CloseProducerSuccess";
    CloseProducerSuccess.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 2, name: "producerId", kind: "scalar", T: 9 },
      { no: 3, name: "label", kind: "scalar", T: 9 }
    ]);
    var CloseConsumerSuccess = class _CloseConsumerSuccess extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _CloseConsumerSuccess().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _CloseConsumerSuccess().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _CloseConsumerSuccess().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_CloseConsumerSuccess, a, b);
      }
    };
    exports.CloseConsumerSuccess = CloseConsumerSuccess;
    CloseConsumerSuccess.runtime = protobuf_1.proto2;
    CloseConsumerSuccess.typeName = "CloseConsumerSuccess";
    CloseConsumerSuccess.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 2, name: "consumerId", kind: "scalar", T: 9 }
    ]);
    var RestartTransportIceResponse = class _RestartTransportIceResponse extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _RestartTransportIceResponse().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _RestartTransportIceResponse().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _RestartTransportIceResponse().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_RestartTransportIceResponse, a, b);
      }
    };
    exports.RestartTransportIceResponse = RestartTransportIceResponse;
    RestartTransportIceResponse.runtime = protobuf_1.proto2;
    RestartTransportIceResponse.typeName = "RestartTransportIceResponse";
    RestartTransportIceResponse.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "transportType", kind: "scalar", T: 9 },
      { no: 2, name: "iceParameters", kind: "message", T: sdp_info_pb_js_1.ProtoIceParameters }
    ]);
    var NewPeerJoined = class _NewPeerJoined extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _NewPeerJoined().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _NewPeerJoined().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _NewPeerJoined().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_NewPeerJoined, a, b);
      }
    };
    exports.NewPeerJoined = NewPeerJoined;
    NewPeerJoined.runtime = protobuf_1.proto2;
    NewPeerJoined.typeName = "NewPeerJoined";
    NewPeerJoined.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 2, name: "metadata", kind: "scalar", T: 9, opt: true },
      { no: 3, name: "role", kind: "scalar", T: 9, opt: true }
    ]);
    var NewLobbyPeer = class _NewLobbyPeer extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _NewLobbyPeer().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _NewLobbyPeer().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _NewLobbyPeer().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_NewLobbyPeer, a, b);
      }
    };
    exports.NewLobbyPeer = NewLobbyPeer;
    NewLobbyPeer.runtime = protobuf_1.proto2;
    NewLobbyPeer.typeName = "NewLobbyPeer";
    NewLobbyPeer.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 2, name: "metadata", kind: "scalar", T: 9, opt: true }
    ]);
    var NewPermissions = class _NewPermissions extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _NewPermissions().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _NewPermissions().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _NewPermissions().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_NewPermissions, a, b);
      }
    };
    exports.NewPermissions = NewPermissions;
    NewPermissions.runtime = protobuf_1.proto2;
    NewPermissions.typeName = "NewPermissions";
    NewPermissions.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 2, name: "acl", kind: "message", T: permissions_pb_js_1.Permissions }
    ]);
    var NewRoomControls = class _NewRoomControls extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _NewRoomControls().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _NewRoomControls().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _NewRoomControls().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_NewRoomControls, a, b);
      }
    };
    exports.NewRoomControls = NewRoomControls;
    NewRoomControls.runtime = protobuf_1.proto2;
    NewRoomControls.typeName = "NewRoomControls";
    NewRoomControls.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "controls", kind: "message", T: RoomControls }
    ]);
    var NewPeerRole = class _NewPeerRole extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _NewPeerRole().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _NewPeerRole().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _NewPeerRole().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_NewPeerRole, a, b);
      }
    };
    exports.NewPeerRole = NewPeerRole;
    NewPeerRole.runtime = protobuf_1.proto2;
    NewPeerRole.typeName = "NewPeerRole";
    NewPeerRole.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 2, name: "role", kind: "scalar", T: 9 }
    ]);
    var ReceiveData = class _ReceiveData extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _ReceiveData().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _ReceiveData().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _ReceiveData().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_ReceiveData, a, b);
      }
    };
    exports.ReceiveData = ReceiveData;
    ReceiveData.runtime = protobuf_1.proto2;
    ReceiveData.typeName = "ReceiveData";
    ReceiveData.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "from", kind: "scalar", T: 9 },
      { no: 2, name: "payload", kind: "scalar", T: 9 },
      { no: 3, name: "label", kind: "scalar", T: 9, opt: true }
    ]);
    var PeerMetadataUpdated = class _PeerMetadataUpdated extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _PeerMetadataUpdated().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _PeerMetadataUpdated().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _PeerMetadataUpdated().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_PeerMetadataUpdated, a, b);
      }
    };
    exports.PeerMetadataUpdated = PeerMetadataUpdated;
    PeerMetadataUpdated.runtime = protobuf_1.proto2;
    PeerMetadataUpdated.typeName = "PeerMetadataUpdated";
    PeerMetadataUpdated.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 2, name: "metadata", kind: "scalar", T: 9 }
    ]);
    var RoomMetadataUpdated = class _RoomMetadataUpdated extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _RoomMetadataUpdated().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _RoomMetadataUpdated().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _RoomMetadataUpdated().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_RoomMetadataUpdated, a, b);
      }
    };
    exports.RoomMetadataUpdated = RoomMetadataUpdated;
    RoomMetadataUpdated.runtime = protobuf_1.proto2;
    RoomMetadataUpdated.typeName = "RoomMetadataUpdated";
    RoomMetadataUpdated.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "metadata", kind: "scalar", T: 9 }
    ]);
    var RoomClosedProducers = class _RoomClosedProducers extends protobuf_1.Message {
      constructor(data) {
        super();
        this.producers = [];
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _RoomClosedProducers().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _RoomClosedProducers().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _RoomClosedProducers().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_RoomClosedProducers, a, b);
      }
    };
    exports.RoomClosedProducers = RoomClosedProducers;
    RoomClosedProducers.runtime = protobuf_1.proto2;
    RoomClosedProducers.typeName = "RoomClosedProducers";
    RoomClosedProducers.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "producers", kind: "message", T: RoomClosedProducers_CloseProducerInfo, repeated: true },
      { no: 2, name: "reason", kind: "message", T: RoomClosedProducers_CloseProducerReason }
    ]);
    var RoomClosedProducers_CloseProducerInfo = class _RoomClosedProducers_CloseProducerInfo extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _RoomClosedProducers_CloseProducerInfo().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _RoomClosedProducers_CloseProducerInfo().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _RoomClosedProducers_CloseProducerInfo().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_RoomClosedProducers_CloseProducerInfo, a, b);
      }
    };
    exports.RoomClosedProducers_CloseProducerInfo = RoomClosedProducers_CloseProducerInfo;
    RoomClosedProducers_CloseProducerInfo.runtime = protobuf_1.proto2;
    RoomClosedProducers_CloseProducerInfo.typeName = "RoomClosedProducers.CloseProducerInfo";
    RoomClosedProducers_CloseProducerInfo.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 2, name: "producerId", kind: "scalar", T: 9 },
      { no: 3, name: "label", kind: "scalar", T: 9 }
    ]);
    var RoomClosedProducers_CloseProducerReason = class _RoomClosedProducers_CloseProducerReason extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _RoomClosedProducers_CloseProducerReason().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _RoomClosedProducers_CloseProducerReason().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _RoomClosedProducers_CloseProducerReason().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_RoomClosedProducers_CloseProducerReason, a, b);
      }
    };
    exports.RoomClosedProducers_CloseProducerReason = RoomClosedProducers_CloseProducerReason;
    RoomClosedProducers_CloseProducerReason.runtime = protobuf_1.proto2;
    RoomClosedProducers_CloseProducerReason.typeName = "RoomClosedProducers.CloseProducerReason";
    RoomClosedProducers_CloseProducerReason.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "code", kind: "scalar", T: 5 },
      { no: 2, name: "tag", kind: "scalar", T: 9 },
      { no: 3, name: "message", kind: "scalar", T: 9 }
    ]);
    var PeerLeft = class _PeerLeft extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _PeerLeft().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _PeerLeft().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _PeerLeft().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_PeerLeft, a, b);
      }
    };
    exports.PeerLeft = PeerLeft;
    PeerLeft.runtime = protobuf_1.proto2;
    PeerLeft.typeName = "PeerLeft";
    PeerLeft.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 }
    ]);
    var LobbyPeerLeft = class _LobbyPeerLeft extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _LobbyPeerLeft().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _LobbyPeerLeft().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _LobbyPeerLeft().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_LobbyPeerLeft, a, b);
      }
    };
    exports.LobbyPeerLeft = LobbyPeerLeft;
    LobbyPeerLeft.runtime = protobuf_1.proto2;
    LobbyPeerLeft.typeName = "LobbyPeerLeft";
    LobbyPeerLeft.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "peerId", kind: "scalar", T: 9 },
      { no: 2, name: "status", kind: "scalar", T: 9 },
      { no: 3, name: "message", kind: "scalar", T: 9, opt: true }
    ]);
    var WaitingRoom = class _WaitingRoom extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _WaitingRoom().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _WaitingRoom().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _WaitingRoom().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_WaitingRoom, a, b);
      }
    };
    exports.WaitingRoom = WaitingRoom;
    WaitingRoom.runtime = protobuf_1.proto2;
    WaitingRoom.typeName = "WaitingRoom";
    WaitingRoom.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "reason", kind: "scalar", T: 9 },
      { no: 2, name: "metadata", kind: "scalar", T: 9, opt: true }
    ]);
    var Error2 = class _Error extends protobuf_1.Message {
      constructor(data) {
        super();
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _Error().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _Error().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _Error().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_Error, a, b);
      }
    };
    exports.Error = Error2;
    Error2.runtime = protobuf_1.proto2;
    Error2.typeName = "Error";
    Error2.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "event", kind: "scalar", T: 9 },
      { no: 2, name: "error", kind: "scalar", T: 9 }
    ]);
    var Response2 = class _Response extends protobuf_1.Message {
      constructor(data) {
        super();
        this.Response = { case: void 0 };
        protobuf_1.proto2.util.initPartial(data, this);
      }
      static fromBinary(bytes, options) {
        return new _Response().fromBinary(bytes, options);
      }
      static fromJson(jsonValue, options) {
        return new _Response().fromJson(jsonValue, options);
      }
      static fromJsonString(jsonString, options) {
        return new _Response().fromJsonString(jsonString, options);
      }
      static equals(a, b) {
        return protobuf_1.proto2.util.equals(_Response, a, b);
      }
    };
    exports.Response = Response2;
    Response2.runtime = protobuf_1.proto2;
    Response2.typeName = "Response";
    Response2.fields = protobuf_1.proto2.util.newFieldList(() => [
      { no: 1, name: "hello", kind: "message", T: Hello, oneof: "Response" },
      { no: 2, name: "connectRoomResponse", kind: "message", T: ConnectRoomResponse, oneof: "Response" },
      { no: 3, name: "createTransportOnClient", kind: "message", T: CreateTransportOnClient, oneof: "Response" },
      { no: 4, name: "produceResponse", kind: "message", T: ProduceResponse, oneof: "Response" },
      { no: 25, name: "consumeDataResponse", kind: "message", T: ConsumeDataResponse, oneof: "Response" },
      { no: 5, name: "produceDataResponse", kind: "message", T: ProduceDataResponse, oneof: "Response" },
      { no: 6, name: "syncMeetingStateResponse", kind: "message", T: SyncMeetingStateResponse, oneof: "Response" },
      { no: 7, name: "consumeResponse", kind: "message", T: ConsumeResponse, oneof: "Response" },
      { no: 8, name: "closeProducerSuccess", kind: "message", T: CloseProducerSuccess, oneof: "Response" },
      { no: 9, name: "closeConsumerSuccess", kind: "message", T: CloseConsumerSuccess, oneof: "Response" },
      { no: 10, name: "connectTransportResponse", kind: "message", T: ConnectTransportResponse, oneof: "Response" },
      { no: 11, name: "restartTransportIceResponse", kind: "message", T: RestartTransportIceResponse, oneof: "Response" },
      { no: 12, name: "newPeerJoined", kind: "message", T: NewPeerJoined, oneof: "Response" },
      { no: 13, name: "newLobbyPeer", kind: "message", T: NewLobbyPeer, oneof: "Response" },
      { no: 14, name: "newPermissions", kind: "message", T: NewPermissions, oneof: "Response" },
      { no: 15, name: "newRoomControls", kind: "message", T: NewRoomControls, oneof: "Response" },
      { no: 16, name: "newPeerRole", kind: "message", T: NewPeerRole, oneof: "Response" },
      { no: 17, name: "receiveData", kind: "message", T: ReceiveData, oneof: "Response" },
      { no: 18, name: "peerMetadataUpdated", kind: "message", T: PeerMetadataUpdated, oneof: "Response" },
      { no: 19, name: "roomMetadataUpdated", kind: "message", T: RoomMetadataUpdated, oneof: "Response" },
      { no: 20, name: "roomClosedProducers", kind: "message", T: RoomClosedProducers, oneof: "Response" },
      { no: 21, name: "peerLeft", kind: "message", T: PeerLeft, oneof: "Response" },
      { no: 22, name: "lobbyPeerLeft", kind: "message", T: LobbyPeerLeft, oneof: "Response" },
      { no: 23, name: "waitingRoom", kind: "message", T: WaitingRoom, oneof: "Response" },
      { no: 24, name: "error", kind: "message", T: Error2, oneof: "Response" }
    ]);
  }
});

// src/Socket.ts
var import_socket = __toESM(require_socket_types(), 1);
var import_request_pb = __toESM(require_request_pb(), 1);
var import_response_pb = __toESM(require_response_pb(), 1);
var logger = mainLogger.createSubLogger("Socket.ts");
var Socket = class _Socket extends EnhancedEventEmitter {
  /**
   * Socket Instance, Singleton class
   */
  static __instance = null;
  /**
   * Retry count for the socket connection, if the connection is closed abnormally, we try to reconnect 5 times
   */
  __retryCount = 0;
  /**
   * Current connection state of the socket connection
   */
  __connectionState = "uninitialized";
  /**
   * Underlying WebSocket connection, until we dont call Socket.connect(); this will be null
   */
  __ws = null;
  /**
   * Map of all the subscribed events/topics for the socket connection
   */
  __subscribedMap = /* @__PURE__ */ new Map();
  /**
   * Region of the current socket connection, specific to the Local Peer who joined the meeting
   */
  __region = null;
  /**
   * Endpoint of the socket server, this is fetched from the API server
   */
  __ENDPOINT = null;
  /**
   * Flag to enable local development
   */
  isLocalDev = false;
  /**
   * Token of the current socket connection, specific to the Local Peer who joined the meeting
   */
  token = null;
  /**
   * Returns the underlying WebSocket connection, throws an error if the connection is not initialized
   * @throws `Error` if the connection is not initialized
   */
  get ws() {
    if (!this.__ws) {
      throw new Error("\u{1F534} Socket Not Initialised");
    }
    return this.__ws;
  }
  /**
   * Getter for the region of the current socket connection
   */
  get region() {
    return this.__region;
  }
  /**
   * Returns the current connection state of the socket connection
   */
  get connectionState() {
    return this.__connectionState;
  }
  /**
   * Returns true if the socket connection is connected
   */
  get connected() {
    return this.ws.OPEN === 1 && this.connectionState === "connected";
  }
  /**
   * Returns true if the socket connection is connecting
   */
  get connecting() {
    return this.ws.CONNECTING === 0 && this.connectionState === "connecting";
  }
  /**
   * Returns true if the socket connection is closed
   */
  get closed() {
    return this.ws.CLOSED === 3 || this.ws.CLOSING === 2;
  }
  /**
   * Sets the current connection state of the socket connection
   */
  set connectionState(state) {
    logger.info(`Connection state changed to ${state}`);
    this.__connectionState = state;
  }
  /**
   * Update the token for this socket
   * @throws `Error` if the token is already set
   */
  setToken(token) {
    if (this.token) {
      throw new Error("\u{1F534} Token Already Set");
    }
    this.token = token;
    this.emit("token-updated", token);
  }
  /**
   * Set a new region for the socket connection
   */
  setRegion(region) {
    this.__region = region;
    this.emit("region-updated", region);
  }
  /**
   * Creates the socket and returns the instance of the socket if already initialized
   * you need to call connect method to connect to the server
   * @param data
   * @returns
   */
  static create() {
    if (!this.__instance) {
      this.__instance = new _Socket();
    }
    return this.__instance;
  }
  /**
   * Returns the instance of the socket connection, throws an error if the connection is not initialized
   * @throws `Error` if the connection is not initialized
   */
  static getInstance() {
    if (!_Socket.__instance) {
      throw new Error(
        "\u{1F534} Socket Instance Not Initialised, You are trying to do something which is not possible"
      );
    }
    return _Socket.__instance;
  }
  constructor() {
    super();
  }
  /**
   *
   */
  __getRegion = async () => {
    const resp = await fetch(
      "https://shinigami.huddle01.com/api/get-geolocation"
    );
    const data = await resp?.json();
    const geolocationdata = GeolocationSchema.safeParse(data);
    if (!geolocationdata.success) {
      throw new Error("\u{1F534} Error While Finding the Region to connect to");
    }
    const region = geolocationdata.data.globalRegion;
    return region;
  };
  enableLocalDev = () => {
    this.isLocalDev = true;
  };
  /**
   * Connect to the socket server using the token
   * @param data - `{ token: string }`
   */
  connect = async (data) => {
    if (!_Socket.__instance) {
      throw new Error("\u{1F534} Socket Instance Not Initialised");
    }
    if (!this.token) {
      this.setToken(data.token);
    }
    if (this.connectionState === "connected") {
      logger.error("\u{1F534} Socket Already Connected");
      return _Socket.__instance;
    }
    if (this.connectionState === "connecting") {
      logger.error("\u{1F534} Socket Connecting");
      return _Socket.__instance;
    }
    if (this.__ws) {
      logger.error("\u{1F534} Socket Already Initialized");
      return _Socket.__instance;
    }
    logger.info("\u{1F50C} Connecting to the socket server");
    if (this.connectionState === "awaiting-reconnection") {
      logger.info(
        "\u{1F50C} Socket connection was awaiting reconnection , creating a new socket connection"
      );
      this.emit("reconnecting");
    }
    if (!this.__region) {
      const region = await this.__getRegion();
      this.__region = region;
    }
    const url = await this.__getConfigUrl(data.token, this.__region);
    this.__ws = new WebSocket(url);
    this.__ws.binaryType = "arraybuffer";
    this.__ws.onerror = (ev) => {
      logger.error(ev);
    };
    this.connectionState = "connecting";
    this.emit("connecting");
    this.__ws.addEventListener("message", this.__handleIncomingMessage);
    this.__registerSocketEvents(this.ws);
    this.__ws.onclose = async (ev) => {
      logger.info("\u{1F514} Socket connection closed", ev);
      if (ev.code === import_socket.ESocketCloseCode.ABNORMAL_CLOSURE) {
        logger.info(
          "\u{1F514} Socket connection closed abnormally, Trying to Reconnect"
        );
        if (this.__retryCount < 7) {
          const delay = 2 ** this.__retryCount * 1e3;
          setTimeout(async () => {
            if (this.token) {
              try {
                await this.connect({ token: this.token });
                this.emit("reconnected");
                this.__retryCount = 0;
              } catch (err) {
                logger.error(
                  `Reconnection Attempt ${this.__retryCount} failed`
                );
              }
            }
          }, Math.min(delay, 2e4));
          this.__retryCount++;
        } else {
          logger.error(
            "\u{1F534} Socket connection closed abnormally, reconnecting failed"
          );
          this.close(import_socket.ESocketCloseCode.CONNECTION_EXPIRED);
        }
      }
    };
    const socketConnectionPromise = new Promise((resolve, reject) => {
      const handleSuccess = () => {
        logger.info("\u2705 Socket Connection Established");
        handleRemoveListeners();
        resolve();
      };
      const handleError = () => {
        logger.error("\u{1F534} Error While Connecting to the Socket");
        handleRemoveListeners();
        reject(new Error("\u274C Socket Connection Failed"));
      };
      const handleRemoveListeners = () => {
        this.off("connected", handleSuccess);
        this.off("failed", handleError);
      };
      this.once("connected", handleSuccess);
      this.once("failed", handleError);
    });
    await socketConnectionPromise;
    return _Socket.__instance;
  };
  /**
   * Closes the underlying socket connection, and clears all the event listeners and subscriptions to events as well as
   * any other information related to the connection.
   * @param code `{ ESocketCloseCode }`
   */
  close = (code) => {
    this.ws.removeEventListener("message", this.__handleIncomingMessage);
    const reason = import_socket.SocketCloseReason[code];
    logger.info(`\u{1F50C} Closing the connection, ${code} ${reason}`);
    if (code >= 3e3 && code <= 4999 || code === 1e3 || code === 1001) {
      this.ws.close(code, reason);
      this.token = null;
      this.__ENDPOINT = null;
      this.emit("token-updated", null);
    } else {
      this.ws.close();
    }
    this.__unregisterSocketEvents(this.ws);
    this.__ws = null;
    if (code === 1006) {
      this.connectionState = "awaiting-reconnection";
      logger.info("\u{1F50C} Socket Connection closed abnormally, reconnecting");
      return;
    }
    this.connectionState = "closed";
    this.emit("closed", code);
    logger.info("\u{1F50C} Socket Connection closed");
  };
  /**
   * Publish a message to the server using the socket connection based on some events/topics
   */
  publish = (event, data) => {
    try {
      const message = new import_request_pb.Request({
        request: {
          case: event,
          value: new ProtoRequestEvent[event](data)
        }
      });
      const binaryData = message.toBinary();
      this.ws.send(binaryData);
    } catch (error) {
      logger.error("\u{1F534} Error While Sending the Message", error);
    }
  };
  /**
   * Subscribe to a specific event/topic from the server
   */
  subscribe = (event, fn) => {
    if (this.__subscribedMap.has(event)) {
      logger.warn("\u26A0\uFE0F Overriding existing event handler");
    }
    this.__subscribedMap.set(event, fn);
  };
  /**
   * Get the config url for the socket connection based on the token and region
   * @param token Local Peer specific meeting token
   * @param region Local Peer specific region
   * @returns
   */
  async __getConfigUrl(token, region) {
    if (this.__ENDPOINT) {
      return this.__ENDPOINT;
    }
    const apiServerUrl = this.isLocalDev ? "http://localhost:8000/api/v1" : "https://apira.huddle01.media/api/v1";
    const res = await fetch(`${apiServerUrl}/getSushiUrl`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        authorization: `Bearer ${token}`
      }
    });
    if (!res.ok) {
      throw new Error("\u{1F534} Error While Fetching the Url");
    }
    const { url, sessionId } = await res.json();
    this.__ENDPOINT = url.replace("https://", "wss://").replace("http://", "ws://");
    const wssAddress = `${this.__ENDPOINT}/ws`;
    const wsAddress = `${wssAddress}?${[
      `token=${token}`,
      `version=${2}`,
      `region=${region}`,
      `sessionId=${sessionId}`
    ].join("&")}`;
    this.__ENDPOINT = wsAddress;
    return wsAddress;
  }
  /**
   * !Important
   * Handle the incoming message from the server based on the events received from the server and call the subscribed event handler
   */
  __handleIncomingMessage = (event) => {
    try {
      const eventData = new Uint8Array(event.data);
      const msg = import_response_pb.Response.fromBinary(eventData).Response;
      logger.debug("\u{1F4E8} Incoming message", msg);
      const eventName = msg.case;
      if (eventName === void 0) {
        throw new Error("\u{1F534} Can't find the event name, Found: { undefined }");
      }
      const data = JSON.parse(JSON.stringify(msg.value));
      logger.info("\u{1F4E8} Incoming message event name: ", eventName);
      const fn = this.__subscribedMap.get(eventName);
      if (fn) {
        fn(data);
      }
    } catch (error) {
      logger.error("\u{1F534} Error: Handling Incoming Message", error);
    }
  };
  __handleSocketError = (ev) => {
    logger.error("Socket connection error", ev);
    this.connectionState = "failed";
    this.emit("failed");
  };
  /**
   * @description Handle the socket close event which is sent by the server
   * @param ev CloseEvent
   */
  __handleSocketClose = (ev) => {
    logger.info("Socket connection closed", ev);
    const code = ev.code;
    const reason = import_socket.SocketCloseReason[code];
    logger.info(`\u{1F534} { Server }: Closing the connection, ${code} ${reason}`);
    this.close(code);
  };
  /**
   * @description Handle the socket open event which is sent after the connection is established with the server
   * @param ev Event
   */
  __handleSocketOpen = (ev) => {
    logger.info("Socket Connection Open", ev);
    this.connectionState = "connected";
    this.emit("connected");
  };
  /**
   * @description Register the socket events
   * @param ws WebSocket
   */
  __registerSocketEvents = (ws) => {
    ws.addEventListener("error", this.__handleSocketError);
    ws.addEventListener("close", this.__handleSocketClose);
    ws.addEventListener("open", this.__handleSocketOpen);
  };
  /**
   * @description Unregister the socket events
   * @param ws WebSocket
   */
  __unregisterSocketEvents = (ws) => {
    ws.removeEventListener("error", this.__handleSocketError);
    ws.removeEventListener("close", this.__handleSocketClose);
    ws.removeEventListener("open", this.__handleSocketOpen);
  };
};
var Socket_default = Socket;

export {
  require_socket_types,
  Socket_default
};
