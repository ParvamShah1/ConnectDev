import {
  EnhancedEventEmitter
} from "./chunk-WGGPFN2Z.js";
import {
  mainLogger
} from "./chunk-TOCFOGTC.js";

// src/Bot.ts
var logger = mainLogger.createSubLogger("Bot");
var Bot = class _Bot extends EnhancedEventEmitter {
  /**
   * Instance of the Bot Class; used for singleton pattern.
   */
  static __instance;
  /**
   * Bot Data Consumer
   */
  __botDataConsumer = null;
  /**
   * Get the instance of the Bot Class.
   * @returns Bot instance.
   */
  static getInstance() {
    if (!_Bot.__instance) {
      _Bot.__instance = new _Bot();
      return _Bot.__instance;
    }
    return _Bot.__instance;
  }
  constructor() {
    super();
  }
  setDataConsumer = (dataConsumer) => {
    logger.debug("\u{1F514} Setting a new data consumer");
    try {
      this.__botDataConsumer?.close();
      this.__botDataConsumer = dataConsumer;
      this.__botDataConsumer.on("message", (message) => {
        try {
          logger.debug("\u{1F514} Bot Data Message", message);
          const parsedJsonData = JSON.parse(message);
          if (parsedJsonData.label === "lastN") {
            this.emit("active-speakers-change", {
              peerIds: parsedJsonData?.payload?.activeSpeakers ?? []
            });
          }
        } catch (error) {
          logger.error("\u274C Error in bot data consumer message", error);
        }
      });
    } catch (error) {
      logger.error("Error in setting data consumer", error);
    }
  };
};
var Bot_default = Bot;

export {
  Bot_default
};
