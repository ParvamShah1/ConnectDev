"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; } var _class;

var _chunkAA6KQKWQcjs = require('./chunk-AA6KQKWQ.cjs');


var _chunkO5HDCTOEcjs = require('./chunk-O5HDCTOE.cjs');

// src/Permissions.ts
var logger = _chunkO5HDCTOEcjs.mainLogger.createSubLogger("Permissions");
var Permissions = (_class = class _Permissions extends _chunkAA6KQKWQcjs.EnhancedEventEmitter {
  /**
   * Get the Singleton Instance of the Permissions Class.
   */
  
  /**
   * Admin Access of the Room.
   */
  __init() {this.__admin = false}
  /**
   * Can Consume Media Stream of the Room from RemotePeers;
   */
  __init2() {this.__canConsume = false}
  /**
   * Can Produce Media Stream to the Room
   */
  __init3() {this.__canProduce = true}
  /**
   * Allowed Sources to Produce Media Stream to the Room
   */
  __init4() {this.__canProduceSources = {
    cam: true,
    mic: true,
    screen: true
  }}
  /**
   * Can Send Data to the Room, e.g. Chat Messages, update of avatar, name etc. to the room
   */
  __init5() {this.__canSendData = false}
  /**
   * Can Receive Data from the Room, e.g. Chat Messages, update of avatar, name etc. from other Remote Peers.
   */
  __init6() {this.__canRecvData = false}
  /**
   * Can Update Metadata of the Room, e.g. DisplayName, Avatar, etc.
   */
  __init7() {this.__canUpdateMetadata = false}
  /**
   * Custom Role of the Peer in the Room.
   */
  __init8() {this.__role = null}
  /**
   * Getter for the role of the peer.
   */
  get role() {
    return this.__role;
  }
  set role(role) {
    this.__role = role;
  }
  /**
   * Get the Access Control List ( acl ) of the Local Peer in the Room.
   */
  get acl() {
    return {
      admin: this.__admin,
      canConsume: this.__canConsume,
      canProduce: this.__canProduce,
      canProduceSources: this.__canProduceSources,
      canSendData: this.__canSendData,
      canRecvData: this.__canRecvData,
      canUpdateMetadata: this.__canUpdateMetadata
    };
  }
  /**
   * Update the Permissions of the Local Peer in the Room. This will emit an event `updated` with the updated permissions.
   *
   * `NOTE: If the Peer is not an admin, then the permissions will not be updated on the server`
   */
  updatePermissions(permissions) {
    logger.info("\u{1F514} Updating Permissions", permissions);
    this.__admin = _nullishCoalesce(permissions.admin, () => ( this.__admin));
    this.__canConsume = _nullishCoalesce(permissions.canConsume, () => ( this.__canConsume));
    this.__canProduce = _nullishCoalesce(permissions.canProduce, () => ( this.__canProduce));
    this.__canProduceSources = _nullishCoalesce(permissions.canProduceSources, () => ( this.__canProduceSources));
    this.__canSendData = _nullishCoalesce(permissions.canSendData, () => ( this.__canSendData));
    this.__canRecvData = _nullishCoalesce(permissions.canRecvData, () => ( this.__canRecvData));
    this.__canUpdateMetadata = _nullishCoalesce(permissions.canUpdateMetadata, () => ( this.__canUpdateMetadata));
  }
  static createInstance() {
    if (_Permissions.__instance)
      return _Permissions.__instance;
    _Permissions.__instance = new _Permissions();
    return _Permissions.__instance;
  }
  static getInstance() {
    if (!_Permissions.__instance) {
      throw new Error("Permissions Instance not created yet.");
    }
    return _Permissions.__instance;
  }
  constructor() {
    super();_class.prototype.__init.call(this);_class.prototype.__init2.call(this);_class.prototype.__init3.call(this);_class.prototype.__init4.call(this);_class.prototype.__init5.call(this);_class.prototype.__init6.call(this);_class.prototype.__init7.call(this);_class.prototype.__init8.call(this);;
  }
  reset() {
    this.__admin = false;
    this.__canConsume = false;
    this.__canProduce = true;
    this.__canProduceSources = {
      cam: true,
      mic: true,
      screen: true
    };
    this.__canSendData = false;
    this.__canRecvData = false;
    this.__canUpdateMetadata = false;
    this.__role = null;
  }
}, _class);
var checkPermissions = (permission) => {
  return {
    validate: (fn) => {
      return (...args) => {
        const peerPermission = Permissions.getInstance().acl;
        if (permission.admin && !peerPermission.admin) {
          throw new Error("Admin Access Required.");
        }
        if (permission.canConsume && !peerPermission.canConsume) {
          throw new Error("Can Consume Access Required.");
        }
        if (permission.canProduce && !peerPermission.canProduce) {
          throw new Error("Can Produce Access Required.");
        }
        if (_optionalChain([permission, 'access', _ => _.canProduceSources, 'optionalAccess', _2 => _2.cam]) && !peerPermission.canProduceSources.cam) {
          throw new Error("Produce Sources Access Required. for 'cam'");
        }
        if (_optionalChain([permission, 'access', _3 => _3.canProduceSources, 'optionalAccess', _4 => _4.mic]) && !peerPermission.canProduceSources.mic) {
          throw new Error("Produce Sources Access Required. for 'mic'");
        }
        if (_optionalChain([permission, 'access', _5 => _5.canProduceSources, 'optionalAccess', _6 => _6.screen]) && !peerPermission.canProduceSources.screen) {
          throw new Error("Produce Sources Access Required. for 'screen'");
        }
        if (permission.canSendData && !peerPermission.canSendData) {
          throw new Error("Can Send Data Access Required.");
        }
        if (permission.canRecvData && !peerPermission.canRecvData) {
          throw new Error("Can Recv Data Access Required.");
        }
        return fn(...args);
      };
    }
  };
};
checkPermissions({
  canProduceSources: {
    cam: true,
    mic: true,
    screen: true
  }
});
var Permissions_default = Permissions;




exports.checkPermissions = checkPermissions; exports.Permissions_default = Permissions_default;
